public with sharing class WeekFiveHomework {
	
	public static void soqlPractice () {

		//1. Below is a SOQL query that should be returning the top 5 Accounts in our org based on Annual Revenue.  
		//Something's not quite right, can you fix the query?

		//Needed to add Order By AnnualRevenue DESC and LIMIT 5

		List < Account > topFiveAccounts = [SELECT ID, Name, AnnualRevenue FROM Account WHERE AnnualRevenue !=0 AND AnnualRevenue != NULL ORDER BY AnnualRevenue DESC LIMIT 5];

		system.debug('This should be 5: '+topFiveAccounts.size());


		//2. Here is a query that is missing something.  It compiles, but if you try and run this method in Anonymous
		//you'll get an error when the method tries to use the query results.  Fix it! :)

		//Needed to add LastName to the SELECT statement since it was needed in the for loop

		List < Contact > contacts = [SELECT FirstName, LastName, MailingState FROM Contact LIMIT 10];

		for (Contact c: contacts) {
			String name = c.FirstName + ' ' + c.LastName;
            
    //Added a system.debug to list the first and last names of the contacts and to print out the list size
            
      System.debug('Contact First and Last Name: ' +name);
    }

      System.debug ('This is the number of contacts returned: ' +contacts.size());
            


		//3.  Can you write a SOQL query from scratch that will return the top 10 Accounts in the org, ordered by annual
		//revenue in decending order?  Print your results in the debug log.

		List < Account > topTenAccounts = [SELECT ID, Name, AnnualRevenue FROM Account WHERE AnnualRevenue !=0 AND AnnualRevenue != null ORDER BY AnnualRevenue DESC LIMIT 10];

		for (Account a: topTenAccounts) {
        system.debug('Top 10 Accounts: ' +a.Name + ' ' +a.AnnualRevenue);
    }

      system.debug('There should be 10 accounts: '+topTenAccounts.size());
        


		//4.  Can you write a SOQL query that will return all opportunities for all accounts in the topFiveAccounts list that we used
		//in Number 1?  (topFiveAccounts) Hint:  If you're stuck, look back a the code in WeekFiveClassExercises, getOpenOppsForHotAccounts method
		//  Print your results in the debug log.

    List <Account> topFiveAccts = topFiveAccounts;
            
		List <Opportunity> topFiveOpptys = [SELECT ID, account.name, Amount, StageName FROM Opportunity WHERE AccountId in:topFiveAccts];
        
    For (opportunity x: topFiveOpptys){
        system.debug('Opportunities for Top Five Accounts: '+ 'Account Name: '+x.account.name + ' ' +x.amount);
    }

        
	}

	public static void forTheLoveOfForLoops () {

		//1. Take a look at the list and loop below.  It's commented out since it can't run as is. 
		// Can you replace the ?? with the number that makes sense based on the comments?
		// Remove the slashes and compile.
		// Can you add an extra counter variable so that you can print out how many times the loop ran in total?


		//This loop should run 5 times
		for (Integer i=0; i<5; i++) {
        Integer loopCounter = i + 1;
        system.debug('i is now: '+i);
        system.debug('Number of times For loop has run: ' +loopCounter);
		}



		//2.  Below is a loop that iterates through a list.  Can you change it to use the new For Loop syntax?  It should print out 
		//each account name in the debug log when you're done.
		//Use the list size to tell you how many loops, and use indexing to fetch values.  If you need help, check the 
		//loopingThroughLists method in WeekFiveClassExercises for hints

		List < Account > accountList = [SELECT ID, Name FROM Account LIMIT 5];
		
    Integer listSize = accountList.size();
        
    for (Integer i=0; i<listSize; i++) {
        system.debug('Account Name: '+accountList[i].name);
		}

	}

}
