
//This is Jennifer Lee's Week 5 Homework

public with sharing class WeekFiveHomework {
	
	public static void soqlPractice () {

		//1. Below is a SOQL query that should be returning the top 5 Accounts in our org based on Annual Revenue.  
		//Something's not quite right, can you fix the query?
		//Order by annual revenue decsending order, limit to 5
		List < Account > topFiveAccounts = [SELECT ID, Name, AnnualRevenue FROM Account WHERE AnnualRevenue !=0 ORDER BY AnnualRevenue DESC LIMIT 5];
		//The expected answer for account size is 5.
		system.debug('This should be 5: '+topFiveAccounts.size());


		//2. Here is a query that is missing something.  It compiles, but if you try and run this method in Anonymous
		//you'll get an error when the method tries to use the query results.  Fix it! :)

		List < Contact > contacts = [SELECT FirstName, LastName, MailingState FROM Contact LIMIT 10];

		for (Contact c: contacts) {
			String name = c.FirstName + ' ' + c.LastName;
		}
/

		//3.  Can you write a SOQL query from scratch that will return the top 10 Accounts in the org, ordered by annual
		//revenue in decending order?  Print your results in the debug log.
		//Pull the top 10 accounts sorted by descending order where the annual revenue is not zero.
		List < Account > topTenAccounts = [SELECT ID, Name, AnnualRevenue FROM Account WHERE AnnualRevenue !=0  ORDER BY AnnualRevenue DESC NULLS LAST LIMIT 10];
        //Confirm topTenAccounts size should be limited to 10
        system.debug('This should limited to 10: '+topTenAccounts.size());
        //Print out the top 10 accounts
        system.debug('topTenAccounts:' + topTenAccounts);

		//4.  Can you write a SOQL query that will return all opportunities for all accounts in the topFiveAccounts list that we used
		//in Number 1?  (topFiveAccounts) Hint:  If you're stuck, look back a the code in WeekFiveClassExercises, getOpenOppsForHotAccounts method
		//  Print your results in the debug log.        
        
		//get the list of opportunities using the top 5 accounts from above
		List < Opportunity > topFiveAccountsOpps = [SELECT ID, Amount, StageName FROM Opportunity WHERE isClosed = FALSE and AccountId in:topFiveAccounts];

		//Print opportunities from top 5 accounts
		system.debug('Top 5 Account Opportunities: '+topFiveAccountsOpps);

	}

	public static void forTheLoveOfForLoops () {

		//1. Take a look at the list and loop below.  It's commented out since it can't run as is. 
		// Can you replace the ?? with the number that makes sense based on the comments?
		// Remove the slashes and compile.
		// Can you add an extra counter variable so that you can print out how many times the loop ran in total?


		//This loop should run 5 times
		for (Integer i=0; i<5; i++) {
            //prints out number of times the loop has run
            system.debug('This loop has run: '+i);            

		}


		//2.  Below is a loop that iterates through a list.  Can you change it to use the new For Loop syntax?  It should print out 
		//each account name in the debug log when you're done.
		//Use the list size to tell you how many loops, and use indexing to fetch values.  If you need help, check the 
		//loopingThroughLists method in WeekFiveClassExercises for hints

		List < Account > accountList = [SELECT ID, Name FROM Account LIMIT 5];

		for (Account a: accountList) {
            
            //counter variable i starts at zero, if i is smaller than accountList of 5, increment the counter
            for (Integer i=0; i < accountList.size(); i++) {
            //print the counter value
            system.debug('What is the value of i at this moment?: '+i);
            //print the size of the account list. This should be 5 to make the account limit
            system.debug('Account size:' +accountList.size());    
			//print the account name using the index in list, matching the counter
            system.debug('Account Name: '+accountList[i].Name);
             
			}
            //print the entire account list of 5 accounts to match them to the account list by index value 
            system.debug(accountList);   
		}
